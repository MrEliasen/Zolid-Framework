<?php
/**
 *  Zolid Framework
 *  https://github.com/MrEliasen/Zolid-Framework
 *  
 *  @author     Mark Eliasen (mark.eliasen@zolidsolutions.com)
 *  @copyright  Copyright (c) 2014, Mark Eliasen
 *  @version    0.1.6.1
 *  @license    http://opensource.org/licenses/MIT MIT License
 */

class Session
{
    private $model;

	public function __construct( $model )
	{
        $this->model = $model;
	}

    public static function destroyMe()
    {
        session_destroy();
    }

	/**
	 * Sets/adds $value to the session array
	 * 
	 * @param string $path  forward-slash delimited string to the session variable path eg. users/id.
	 * @param mixed  $value the value you wish to add to the session variable.
	 */
	public static function set( $path, $value )
	{
		$newData = '';
		$path = explode('/', $path);

		while( $segment = array_pop($path) )
		{
		    $newData = array($segment => ( empty($newData) ? $value : $newData ) );
		}

		$_SESSION = array_replace_recursive($_SESSION, $newData);
	}

	/**
	 * Gets a value (if available) from the session array
	 * 
	 * @param  string $path forward-slash delimited string to the session variable path eg. users/id.
	 * @return mixed       	The requred value, or null if not found.
	 */
	public static function get( $path )
	{
		$path = explode('/', $path);
		$data = $_SESSION;

		foreach( $path as $p )
		{
			if( !isset($data[ $p ]) )
			{
				$data = null;
				break;
			}

			$data = $data[ $p ];
		}

		return $data;
	}

	/**
	 * Starts the user session
	 */
	public function start()
	{
        if( $this->model->installed )
        {
            session_set_save_handler(
                array($this, 'open'),
                array($this, 'close'),
                array($this, 'read'),
                array($this, 'write'),
                array($this, 'destroy'),
                array($this, 'gc')
            );
        }

		session_start();
        $this->regenerate();
	}

    /**
     * regenerates the session id if we can see it has not been generated from this script.
     * 
     * @param  boolean $force forcefully regenerate the session id, no matter what.
     * @return boolean         ture if the session id was regenerated, false if not/not required.
     */
    public function regenerate( $force = false )
    {
    	$value = self::get('secure_session');

        if( !$force && !empty($value) )
        {
            if( $value == sha1(session_id()) )
            {
                return;
            }
        }

        // The session was not generated by the system, regenerate a new session ID and tell the system this session is "OK".
        session_regenerate_id(false);
        self::set('secure_session', sha1(session_id()));
    }

    /**
     * Deletes the session from the database
     * 
     * @param  string 	$id session id, if none is supplied, it will use the current user's session id
     * @return boolean     	true.
     */
    public function destroy($id = null)
    {
        $destroy = $this->model->connection->prepare('DELETE FROM ' . Configure::get('database/prefix') . 'sessions WHERE id = ?');
        $destroy->execute( array( Security::sanitize( (!empty($id) ? $id : session_id() ), 'string' ) ) );
        $destroy->closeCursor();

        if( empty($id) )
        {
            $this->regenerate(true);
        }

        return true;
    }

    // not used for anything but to keep the session_set_save_handler() function happy
    public function open()
    {
        return true;
    }

    // not used for anything but to keep the session_set_save_handler() function happy
    public function close()
    {
        return true;
    }

    /**
     * reads session data from the database
     * 
     * @param  string $id session id
     * @return string     session data
     */
    public function read( $id )
    {
        $stmt = $this->model->connection->prepare('SELECT
	                                                    data
	                                                FROM
	                                                    ' . Configure::get('database/prefix') . 'sessions
	                                                WHERE
	                                                    `id` = ?
	                                                AND
	                                                    `agent` = ?
	                                                AND
	                                                    `host` = ?
	                                                AND
	                                                    `ip` = ?
	                                                AND
	                                                    `lang` = ?
	                                                LIMIT 1');

        $stmt->execute(
        	array(
                $id,
                sha1( $_SERVER['HTTP_USER_AGENT'] ),
                sha1( gethostbyaddr( $_SERVER['REMOTE_ADDR'] ) ),
                sha1( $_SERVER['REMOTE_ADDR'] ),
                sha1( $_SERVER['HTTP_ACCEPT_LANGUAGE'] ),
            )
        );

        $data = $stmt->fetch(PDO::FETCH_ASSOC);
        $stmt->closeCursor();

        return $data['data'];
    }

    /**
     * writes the session data to the database
     * @param  string $id   session id
     * @param  string $data session data
     * @return boolean       true on succes, false on error
     */
    public function write($id, $data)
    {
        $stmt = $this->model->connection->prepare('INSERT INTO
	                                                        ' . Configure::get('database/prefix') . 'sessions
	                                                        (`id`, `data`, `expire`, `agent`, `host`, `ip`, `lang`)
	                                                    VALUES
	                                                        (?,?,?,?,?,?,?)
	                                                    ON DUPLICATE KEY UPDATE
	                                                        `data` = VALUES(data),
	                                                        `expire` = VALUES(expire)');

        $stmt->execute(
            array(
                $id,
                $data,
                time(),
                sha1( $_SERVER['HTTP_USER_AGENT'] ),
                sha1( gethostbyaddr( $_SERVER['REMOTE_ADDR'] ) ),
                sha1( $_SERVER['REMOTE_ADDR'] ),
                sha1( $_SERVER['HTTP_ACCEPT_LANGUAGE'] ),
            )
        );
        $stmt->closeCursor();

        return true;
    }
    
    /**
     * Session garbage collection
     * @return boolean true
     */
    public function gc()
    {
        $stmt = $this->model->connection->prepare('DELETE FROM ' . Configure::get('database/prefix') . 'sessions WHERE expire < :time');
        $stmt->bindValue(':time', time() - Configure::get('database/session_timeout'), PDO::PARAM_INT);
        $stmt->execute();
        $stmt->closeCursor();
        
        return true;
    }
}